// Code generated by protoc-gen-go. DO NOT EDIT.
// source: speech.proto

package speech

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Voice struct {
	VoiceLocation        string   `protobuf:"bytes,1,opt,name=voice_location,json=voiceLocation,proto3" json:"voice_location,omitempty"`
	Bucket               string   `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	TextLocation         string   `protobuf:"bytes,3,opt,name=text_location,json=textLocation,proto3" json:"text_location,omitempty"`
	ProjectID            string   `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Voice) Reset()         { *m = Voice{} }
func (m *Voice) String() string { return proto.CompactTextString(m) }
func (*Voice) ProtoMessage()    {}
func (*Voice) Descriptor() ([]byte, []int) {
	return fileDescriptor_93c8715332746f2c, []int{0}
}

func (m *Voice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Voice.Unmarshal(m, b)
}
func (m *Voice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Voice.Marshal(b, m, deterministic)
}
func (m *Voice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voice.Merge(m, src)
}
func (m *Voice) XXX_Size() int {
	return xxx_messageInfo_Voice.Size(m)
}
func (m *Voice) XXX_DiscardUnknown() {
	xxx_messageInfo_Voice.DiscardUnknown(m)
}

var xxx_messageInfo_Voice proto.InternalMessageInfo

func (m *Voice) GetVoiceLocation() string {
	if m != nil {
		return m.VoiceLocation
	}
	return ""
}

func (m *Voice) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Voice) GetTextLocation() string {
	if m != nil {
		return m.TextLocation
	}
	return ""
}

func (m *Voice) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

type Text struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Confidence           float32  `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_93c8715332746f2c, []int{1}
}

func (m *Text) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Text.Unmarshal(m, b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Text.Marshal(b, m, deterministic)
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return xxx_messageInfo_Text.Size(m)
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Text) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func init() {
	proto.RegisterType((*Voice)(nil), "Voice")
	proto.RegisterType((*Text)(nil), "Text")
}

func init() { proto.RegisterFile("speech.proto", fileDescriptor_93c8715332746f2c) }

var fileDescriptor_93c8715332746f2c = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x31, 0x4b, 0xc7, 0x30,
	0x10, 0xc5, 0xed, 0xdf, 0xb6, 0xd0, 0x23, 0x75, 0xc8, 0x20, 0x45, 0x44, 0xa5, 0x22, 0x38, 0x55,
	0xd0, 0xcd, 0xd9, 0x45, 0x70, 0xaa, 0xc5, 0x55, 0xda, 0xf3, 0xc4, 0xa8, 0xe4, 0x42, 0x7a, 0x4a,
	0xbf, 0x82, 0xdf, 0x5a, 0x72, 0x14, 0xeb, 0x76, 0xef, 0xf7, 0xf2, 0xf2, 0x78, 0x60, 0xe6, 0x40,
	0x84, 0x6f, 0x5d, 0x88, 0x2c, 0xdc, 0xfe, 0x64, 0x50, 0x3c, 0xb1, 0x43, 0xb2, 0x17, 0x70, 0xf0,
	0x9d, 0x8e, 0xe7, 0x4f, 0xc6, 0x51, 0x1c, 0xfb, 0x26, 0x3b, 0xcb, 0x2e, 0xab, 0xbe, 0x56, 0xfa,
	0xb0, 0x42, 0x7b, 0x08, 0xe5, 0xf4, 0x85, 0x1f, 0x24, 0xcd, 0x4e, 0xed, 0x55, 0xd9, 0x73, 0xa8,
	0x85, 0x16, 0xd9, 0xd2, 0xfb, 0x6a, 0x9b, 0x04, 0xff, 0xc2, 0xc7, 0x50, 0x85, 0xc8, 0xef, 0x84,
	0x72, 0x7f, 0xd7, 0xe4, 0xfa, 0x60, 0x03, 0xed, 0x2d, 0xe4, 0x03, 0x2d, 0x62, 0x2d, 0xe4, 0x29,
	0xb5, 0xf6, 0xeb, 0x6d, 0x4f, 0x00, 0x90, 0xfd, 0xab, 0x7b, 0x21, 0x8f, 0xa4, 0xd5, 0xbb, 0xfe,
	0x1f, 0xb9, 0xbe, 0x02, 0x33, 0xc4, 0xd1, 0xcf, 0x18, 0x5d, 0x10, 0x8a, 0xf6, 0x14, 0xcc, 0xa3,
	0xee, 0x1c, 0x58, 0xff, 0x2c, 0x3b, 0x5d, 0x79, 0x54, 0x74, 0x49, 0xb6, 0x7b, 0x53, 0xa9, 0xfb,
	0x6f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x00, 0x5e, 0xea, 0x8c, 0x0f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TranscripterClient is the client API for Transcripter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranscripterClient interface {
	SpeechToText(ctx context.Context, in *Voice, opts ...grpc.CallOption) (*Text, error)
}

type transcripterClient struct {
	cc *grpc.ClientConn
}

func NewTranscripterClient(cc *grpc.ClientConn) TranscripterClient {
	return &transcripterClient{cc}
}

func (c *transcripterClient) SpeechToText(ctx context.Context, in *Voice, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := c.cc.Invoke(ctx, "/Transcripter/SpeechToText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscripterServer is the server API for Transcripter service.
type TranscripterServer interface {
	SpeechToText(context.Context, *Voice) (*Text, error)
}

// UnimplementedTranscripterServer can be embedded to have forward compatible implementations.
type UnimplementedTranscripterServer struct {
}

func (*UnimplementedTranscripterServer) SpeechToText(ctx context.Context, req *Voice) (*Text, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeechToText not implemented")
}

func RegisterTranscripterServer(s *grpc.Server, srv TranscripterServer) {
	s.RegisterService(&_Transcripter_serviceDesc, srv)
}

func _Transcripter_SpeechToText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Voice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscripterServer).SpeechToText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Transcripter/SpeechToText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscripterServer).SpeechToText(ctx, req.(*Voice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transcripter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Transcripter",
	HandlerType: (*TranscripterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpeechToText",
			Handler:    _Transcripter_SpeechToText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speech.proto",
}
